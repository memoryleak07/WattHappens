@page "/settings"

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ApplicationDbContext DbContext
@inject ProcessingStateContainer ProcessingState
@using System.Globalization
@using Microsoft.EntityFrameworkCore
@using WattHappens.Application.Common
@using WattHappens.Infrastructure.Data

<PageTitle>Settings</PageTitle>

<MudStack Style="width: 100%">

    <MudText Typo="Typo.h3" GutterBottom="true">Settings</MudText>
    <MudText Class="mb-8">Lorem lorem lorem lorem lorem lorem lorem lorem lorem</MudText>

    <MudNumericField @bind-Value="_cost" 
                     Label="Electricity Energy Cost" 
                     Adornment="Adornment.End"
                     AdornmentText="€/kWh"
                     AdornmentColor="Color.Default"
                     Format="F2" 
                     Culture="CultureInfo.CurrentCulture"
                     Required="true"
                     Variant="Variant.Outlined"
                     HelperText="Euro / Kilowatt-hour (€/kWh)"/>

    <MudSpacer />
    
    <MudButton @onclick="SaveSettingsAsync" 
               Variant="Variant.Filled" 
               Color="Color.Primary">
        Save
    </MudButton>

</MudStack>

@code
{
    private double _cost;
    
    private async Task SaveSettingsAsync()
    {
        try
        {
            ProcessingState.IsProcessing = true;
            var price = await DbContext.Price.SingleOrDefaultAsync();
            if (price == null)
            {
                Snackbar.Add("Price not found.", Severity.Error);
                return;
            }
            price.Cost = _cost;
            await DbContext.SaveChangesAsync();
            ProcessingState.IsProcessing = false;
            Snackbar.Add("Settings saved.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{ex.Message}. {ex.InnerException?.Message}", Severity.Error);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        _cost = await DbContext.Price.Select(x => x.Cost).FirstOrDefaultAsync();
    }
}
