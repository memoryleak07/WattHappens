@page "/"

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using WattHappens.Domain.Entities
@using WattHappens.Infrastructure.Data
@using WattHappens.Web.Components.Shared
@using WattHappens.Web.Utilities

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Hello, world!</MudText>
<MudText Class="mb-8">Welcome to your new app, powered by MudBlazor and the .NET 8 Template!</MudText>

<MudStack>

    <MudFab @onclick="AddApplianceAsync"
            Size="Size.Medium"
            Color="Color.Tertiary"
            StartIcon="@Icons.Material.Filled.Add"/>

    @if (!_appliances.Any())
    {
        <MudText Typo="Typo.h6">No appliances found.</MudText>
    }
    else
    {
        <MudGrid Spacing="10" Justify="Justify.Center">
            @foreach (var appliance in _appliances)
            {
                <MudItem xl="3" lg="3" md="6" xs="12">
                    <MudCard Outlined="true" Elevation="5">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@appliance.Name</MudText>
                            </CardHeaderContent>
                            <CardHeaderAvatar>
                                <MudChip T="string"
                                         Icon="@Icons.Material.Outlined.Power"
                                         Color="Color.Transparent">
                                    @appliance.WattPowerConsumption W
                                </MudChip>
                            </CardHeaderAvatar>
                            <CardHeaderActions>
                                <MudIconButton OnClick="@(async () => await EditApplianceAsync(@appliance))"
                                               Icon="@Icons.Material.Filled.Edit"
                                               Size="Size.Small"
                                               Color="Color.Default"/>
                                <MudIconButton OnClick="@(async () => await RemoveApplianceAsync(@appliance))"
                                               Icon="@Icons.Material.Filled.Delete"
                                               Size="Size.Small"
                                               Color="Color.Default"/>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                <MudChart ChartType="ChartType.Donut"
                                          InputData="@(new[] { appliance.HoursUsedPerDay, 24 - appliance.HoursUsedPerDay })"
                                          Width="110px"
                                          Height="110px"
                                          ChartOptions="@(new ChartOptions { ShowLegend = false, ChartPalette = ["#478778", "#B2BEB5"] })">
                                    <CustomGraphics>
                                        <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle"
                                              text-anchor="middle" fill="black" font-family="Helvetica" font-size="8">
                                            @(appliance.HoursUsedPerDay >= 1 ? appliance.HoursUsedPerDay : appliance.HoursUsedPerDay * 60)
                                        </text>
                                        <text class="donut-inner-text" x="50%" y="65%" dominant-baseline="middle"
                                              text-anchor="middle" fill="black" font-family="Helvetica" font-size="3.5">
                                            @(appliance.HoursUsedPerDay >= 1 ? "hr/day" : "min/day")
                                        </text>
                                    </CustomGraphics>
                                </MudChart>
                                <MudChart ChartType="ChartType.Donut"
                                          InputData="@(new[] { appliance.DaysUsedPerWeek, 7 - appliance.DaysUsedPerWeek })"
                                          Width="110px"
                                          Height="110px"
                                          ChartOptions="@(new ChartOptions { ShowLegend = false, ChartPalette = ["#478778", "#B2BEB5"] })">
                                    <CustomGraphics>
                                        <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle"
                                              text-anchor="middle" fill="black" font-family="Helvetica" font-size="8">
                                            @(appliance.DaysUsedPerWeek)
                                        </text>
                                        <text class="donut-inner-text" x="50%" y="65%" dominant-baseline="middle"
                                              text-anchor="middle" fill="black" font-family="Helvetica" font-size="3.5">
                                            @(appliance.DaysUsedPerWeek > 1 ? "days/week" : "day/week")
                                        </text>
                                    </CustomGraphics>
                                </MudChart>
                                <MudChart ChartType="ChartType.Donut"
                                          InputData="@(new[] { appliance.DaysUsedPerMonth, 30 - appliance.DaysUsedPerMonth })"
                                          Width="110px"
                                          Height="110px"
                                          ChartOptions="@(new ChartOptions { ShowLegend = false, ChartPalette = ["#478778", "#B2BEB5"] })">
                                    <CustomGraphics>
                                        <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle"
                                              text-anchor="middle" fill="black" font-family="Helvetica" font-size="8">
                                            @(appliance.DaysUsedPerMonth)
                                        </text>
                                        <text class="donut-inner-text" x="50%" y="65%" dominant-baseline="middle"
                                              text-anchor="middle" fill="black" font-family="Helvetica" font-size="3.5">
                                            @(appliance.DaysUsedPerMonth > 1 ? "days/month" : "day/month")
                                        </text>
                                    </CustomGraphics>
                                </MudChart>
                            </MudStack>
                        </MudCardContent>
                        <MudDivider/>
                        <MudCardActions Style="background-color: #A5D6A7">
                            <MudChip T="string"
                                     Icon="@Icons.Material.Outlined.EnergySavingsLeaf"
                                     Color="Color.Transparent">
                                @(Calculations.KilowattConsumptionPerDay(appliance)) kWh
                            </MudChip>
                            <MudChip T="string"
                                     Icon="@Icons.Material.Outlined.Euro"
                                     Color="Color.Transparent">
                                @(Calculations.CostPerDay(appliance, _price!))
                            </MudChip>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }

</MudStack>

@code

{
    private ICollection<Appliance> _appliances = new List<Appliance>();
    private Price? _price = null;

    protected override async Task OnInitializedAsync()
    {
        _price = await DbContext.Price.FirstOrDefaultAsync();
        if (_price == null)
        {
            NavigationManager.NavigateTo("/settings");
            return;
        }

        _appliances = await DbContext.Appliances.ToListAsync();
    }

    private async Task RemoveApplianceAsync(Appliance appliance)
    {
        try
        {
            DbContext.Appliances.Remove(appliance);
            await DbContext.SaveChangesAsync();
            _appliances.Remove(appliance);
            Snackbar.Add("Success!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{ex.Message}. {ex.InnerException?.Message}", Severity.Error);
        }
    }

    private async Task AddApplianceAsync()
    {
        var dialog = await DialogService.ShowAsync<ApplianceDialogComponent>(
            "Add Appliance",
            new DialogParameters { ["Appliance"] = new Appliance(), ["IsEditMode"] = false },
            new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });

        var result = await dialog.Result;
        if (result == null || result.Canceled) return;

        var newAppliance = (Appliance?)result.Data;
        if (newAppliance == null)
        {
            Snackbar.Add("Error mapping item.", Severity.Error);
            return;
        }

        try
        {
            await DbContext.Appliances.AddAsync(newAppliance);
            await DbContext.SaveChangesAsync();
            _appliances.Add(newAppliance);
            Snackbar.Add("Success!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{ex.Message}. {ex.InnerException?.Message}", Severity.Error);
        }
    }

    private async Task EditApplianceAsync(Appliance appliance)
    {
        var dialog = await DialogService.ShowAsync<ApplianceDialogComponent>(
            "Edit Appliance",
            new DialogParameters { ["Appliance"] = appliance, ["IsEditMode"] = true },
            new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });

        var result = await dialog.Result;
        if (result == null || result.Canceled) return;

        var updatedAppliance = (Appliance?)result.Data;
        if (updatedAppliance == null)
        {
            Snackbar.Add("Error mapping item.", Severity.Error);
            return;
        }

        try
        {
            DbContext.Appliances.Update(updatedAppliance);
            await DbContext.SaveChangesAsync();
            Snackbar.Add("Success!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{ex.Message}. {ex.InnerException?.Message}", Severity.Error);
        }
    }
}
