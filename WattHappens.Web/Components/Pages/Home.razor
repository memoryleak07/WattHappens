@page "/"
@using WattHappens.Web.Components.Shared

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<MudStack>

    <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">

        <MudItem xl="6" xs="6">
            <MudButton @onclick="AddPriceAsync"
                       Size="Size.Large"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Settings">
                Edit Price
            </MudButton>
        </MudItem>

        <MudItem xl="6" xs="6">
            <MudButton @onclick="AddApplianceAsync"
                       Size="Size.Large"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add">
                Add Appliance
            </MudButton>
        </MudItem>

        <MudItem xl="6" xs="6">
            <MudButton @onclick="GoToStatistics"
                       Size="Size.Large"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Insights">
                See Statistics
            </MudButton>
        </MudItem>

    </MudStack>
    @if (!_appliances.Any())
    {
        <MudText Typo="Typo.h6">No appliances found.</MudText>
    }
    else
    {
        <MudGrid Spacing="10" Justify="Justify.Center">
            @foreach (var appliance in _appliances)
            {
                <MudItem xl="3" xs="12">
                    <MudCard Outlined="true" Elevation="5">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Style="margin: 5px; padding: 5px">@appliance.Name</MudText>
                                <MudChip T="string"
                                         Size="Size.Small"
                                         Icon="@Icons.Material.Outlined.Power"
                                         Style="background-color: #673AB7; color: white">
                                    @($"{appliance.WattPowerConsumption} W")
                                </MudChip>
                                @if (appliance.Quantity > 1)
                                {
                                    <MudChip T="string"
                                             Size="Size.Small"
                                             Icon="@Icons.Material.Outlined.Numbers"
                                             Style="background-color: #673AB7; color: white">
                                        @($"x{appliance.Quantity}")
                                    </MudChip>
                                }
                                <MudChip T="EnCategory"
                                         Size="Size.Small"
                                         Icon="@Icons.Material.Outlined.Category"
                                         Style="background-color: #673AB7; color: white">
                                    @appliance.Category
                                </MudChip>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton OnClick="@(async () => await EditApplianceAsync(@appliance))"
                                               Icon="@Icons.Material.Filled.Edit"
                                               Size="Size.Small"
                                               Color="Color.Default"/>
                                <MudIconButton OnClick="@(async () => await RemoveApplianceAsync(@appliance))"
                                               Icon="@Icons.Material.Filled.Delete"
                                               Size="Size.Small"
                                               Color="Color.Default"/>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>

                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                <ApplianceMudChartsDonutComponent Appliance="appliance"/>
                            </MudStack>
                        </MudCardContent>

                        <MudDivider/>
                        <MudCardContent Class="pa-4" Style="background-color:#B49BDF">
                            <MudStack Row="true"
                                      Spacing="2"
                                      AlignItems="AlignItems.Center"
                                      Justify="Justify.SpaceAround">

                                <ApplianceConsumptionsMudItemsComponent
                                    Appliance="appliance"
                                    Price="@_price"/>

                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudStack>

@code
{
    private ICollection<Category> _categories = new List<Category>();
    private ICollection<Appliance> _appliances = new List<Appliance>();
    private Price _price = default!;

    protected override async Task OnInitializedAsync()
    {
        _price = await DbContext.Prices.FirstAsync();
        _categories = await DbContext.Categories.ToListAsync();
        _appliances = await DbContext.Appliances.ToListAsync();
    }

    private void GoToStatistics()
    {
        NavigationManager.NavigateTo("/statistics");
    }

    private async Task RemoveApplianceAsync(Appliance appliance)
    {
        try
        {
            DbContext.Appliances.Remove(appliance);
            await DbContext.SaveChangesAsync();
            _appliances.Remove(appliance);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{ex.Message}. {ex.InnerException?.Message}", Severity.Error);
        }
    }

    private async Task AddPriceAsync()
    {
        var dialog = await DialogService.ShowAsync<PriceDialogComponent>(
            "Edit Price",
            new DialogParameters { ["Price"] = _price },
            new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });

        var result = await dialog.Result;
        if (result == null || result.Canceled) return;

        var updatedPrice = (Price?)result.Data;
        if (updatedPrice == null)
        {
            Snackbar.Add("Error mapping item.", Severity.Error);
            return;
        }

        try
        {
            DbContext.Prices.Update(updatedPrice);
            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{ex.Message}. {ex.InnerException?.Message}", Severity.Error);
        }
    }

    private async Task AddApplianceAsync()
    {
        var dialog = await DialogService.ShowAsync<ApplianceDialogComponent>(
            "Add Appliance",
            new DialogParameters { ["Appliance"] = new Appliance(), ["Categories"] = _categories, ["IsEditMode"] = false },
            new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });

        var result = await dialog.Result;
        if (result == null || result.Canceled) return;

        var newAppliance = (Appliance?)result.Data;
        if (newAppliance == null)
        {
            Snackbar.Add("Error mapping item.", Severity.Error);
            return;
        }

        try
        {
            await DbContext.Appliances.AddAsync(newAppliance);
            await DbContext.SaveChangesAsync();
            _appliances.Add(newAppliance);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{ex.Message}. {ex.InnerException?.Message}", Severity.Error);
        }
    }

    private async Task EditApplianceAsync(Appliance appliance)
    {
        var dialog = await DialogService.ShowAsync<ApplianceDialogComponent>(
            "Edit Appliance",
            new DialogParameters { ["Appliance"] = appliance, ["Categories"] = _categories, ["IsEditMode"] = true },
            new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });

        var result = await dialog.Result;
        if (result == null || result.Canceled) return;

        var updatedAppliance = (Appliance?)result.Data;
        if (updatedAppliance == null)
        {
            Snackbar.Add("Error mapping item.", Severity.Error);
            return;
        }

        try
        {
            DbContext.Appliances.Update(updatedAppliance);
            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{ex.Message}. {ex.InnerException?.Message}", Severity.Error);
        }
    }
}
